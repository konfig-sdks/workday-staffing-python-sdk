# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class BusinessProcessParameters2dcd9a4882b210000f7b2e0a85982265(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "action",
                }
                
                class properties:
                
                    @staticmethod
                    def action() -> typing.Type['Action38ff08ab6736100010816009079d0126']:
                        return Action38ff08ab6736100010816009079d0126
                
                    @staticmethod
                    def overallBusinessProcess() -> typing.Type['OverallBusinessProcess5d688bd57bb910001815ab49927724aa']:
                        return OverallBusinessProcess5d688bd57bb910001815ab49927724aa
                    comment = schemas.StrSchema
                    
                    
                    class comments(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Comments86093b8a932f10001499f356ff83012e']:
                                return Comments86093b8a932f10001499f356ff83012e
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Comments86093b8a932f10001499f356ff83012e'], typing.List['Comments86093b8a932f10001499f356ff83012e']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'comments':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Comments86093b8a932f10001499f356ff83012e':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def transactionStatus() -> typing.Type['TransactionStatus7457adcbe0fa1000089b63ab3a510000']:
                        return TransactionStatus7457adcbe0fa1000089b63ab3a510000
                    warningValidations = schemas.StrSchema
                    overallStatus = schemas.StrSchema
                    
                    
                    class attachments(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143']:
                                return EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143'], typing.List['EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'attachments':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143':
                            return super().__getitem__(i)
                    criticalValidations = schemas.StrSchema
                
                    @staticmethod
                    def _for() -> typing.Type['For5d688bd57bb910001815ab3dd10024a9']:
                        return For5d688bd57bb910001815ab3dd10024a9
                    __annotations__ = {
                        "action": action,
                        "overallBusinessProcess": overallBusinessProcess,
                        "comment": comment,
                        "comments": comments,
                        "transactionStatus": transactionStatus,
                        "warningValidations": warningValidations,
                        "overallStatus": overallStatus,
                        "attachments": attachments,
                        "criticalValidations": criticalValidations,
                        "for": _for,
                    }
            
            action: 'Action38ff08ab6736100010816009079d0126'
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["action"]) -> 'Action38ff08ab6736100010816009079d0126': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["overallBusinessProcess"]) -> 'OverallBusinessProcess5d688bd57bb910001815ab49927724aa': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transactionStatus"]) -> 'TransactionStatus7457adcbe0fa1000089b63ab3a510000': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["warningValidations"]) -> MetaOapg.properties.warningValidations: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["overallStatus"]) -> MetaOapg.properties.overallStatus: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["criticalValidations"]) -> MetaOapg.properties.criticalValidations: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["for"]) -> 'For5d688bd57bb910001815ab3dd10024a9': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["action", "overallBusinessProcess", "comment", "comments", "transactionStatus", "warningValidations", "overallStatus", "attachments", "criticalValidations", "for", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> 'Action38ff08ab6736100010816009079d0126': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["overallBusinessProcess"]) -> typing.Union['OverallBusinessProcess5d688bd57bb910001815ab49927724aa', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transactionStatus"]) -> typing.Union['TransactionStatus7457adcbe0fa1000089b63ab3a510000', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["warningValidations"]) -> typing.Union[MetaOapg.properties.warningValidations, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["overallStatus"]) -> typing.Union[MetaOapg.properties.overallStatus, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["criticalValidations"]) -> typing.Union[MetaOapg.properties.criticalValidations, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["for"]) -> typing.Union['For5d688bd57bb910001815ab3dd10024a9', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action", "overallBusinessProcess", "comment", "comments", "transactionStatus", "warningValidations", "overallStatus", "attachments", "criticalValidations", "for", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                action: 'Action38ff08ab6736100010816009079d0126',
                overallBusinessProcess: typing.Union['OverallBusinessProcess5d688bd57bb910001815ab49927724aa', schemas.Unset] = schemas.unset,
                comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
                comments: typing.Union[MetaOapg.properties.comments, list, tuple, schemas.Unset] = schemas.unset,
                transactionStatus: typing.Union['TransactionStatus7457adcbe0fa1000089b63ab3a510000', schemas.Unset] = schemas.unset,
                warningValidations: typing.Union[MetaOapg.properties.warningValidations, str, schemas.Unset] = schemas.unset,
                overallStatus: typing.Union[MetaOapg.properties.overallStatus, str, schemas.Unset] = schemas.unset,
                attachments: typing.Union[MetaOapg.properties.attachments, list, tuple, schemas.Unset] = schemas.unset,
                criticalValidations: typing.Union[MetaOapg.properties.criticalValidations, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    action=action,
                    overallBusinessProcess=overallBusinessProcess,
                    comment=comment,
                    comments=comments,
                    transactionStatus=transactionStatus,
                    warningValidations=warningValidations,
                    overallStatus=overallStatus,
                    attachments=attachments,
                    criticalValidations=criticalValidations,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BusinessProcessParameters2dcd9a4882b210000f7b2e0a85982265':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.action38ff08ab6736100010816009079d0126 import Action38ff08ab6736100010816009079d0126
from workday_staffing_python_sdk.model.comments86093b8a932f10001499f356ff83012e import Comments86093b8a932f10001499f356ff83012e
from workday_staffing_python_sdk.model.event_attachments_for_toolbar43b30ba735b8100011ee4767246d0143 import EventAttachmentsForToolbar43b30ba735b8100011ee4767246d0143
from workday_staffing_python_sdk.model.for5d688bd57bb910001815ab3dd10024a9 import For5d688bd57bb910001815ab3dd10024a9
from workday_staffing_python_sdk.model.overall_business_process5d688bd57bb910001815ab49927724aa import OverallBusinessProcess5d688bd57bb910001815ab49927724aa
from workday_staffing_python_sdk.model.transaction_status7457adcbe0fa1000089b63ab3a510000 import TransactionStatus7457adcbe0fa1000089b63ab3a510000
