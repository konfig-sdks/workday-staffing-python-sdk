# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    externalSkillName = schemas.StrSchema
                    externalSkillLevel = schemas.IntSchema
                    skillVendorName = schemas.StrSchema
                    skillVendorId = schemas.StrSchema
                    context = schemas.StrSchema
                    effectiveMoment = schemas.DateSchema
                    externalSkillId = schemas.StrSchema
                    id = schemas.StrSchema
                    __annotations__ = {
                        "externalSkillName": externalSkillName,
                        "externalSkillLevel": externalSkillLevel,
                        "skillVendorName": skillVendorName,
                        "skillVendorId": skillVendorId,
                        "context": context,
                        "effectiveMoment": effectiveMoment,
                        "externalSkillId": externalSkillId,
                        "id": id,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["externalSkillName"]) -> MetaOapg.properties.externalSkillName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["externalSkillLevel"]) -> MetaOapg.properties.externalSkillLevel: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["skillVendorName"]) -> MetaOapg.properties.skillVendorName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["skillVendorId"]) -> MetaOapg.properties.skillVendorId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["effectiveMoment"]) -> MetaOapg.properties.effectiveMoment: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["externalSkillId"]) -> MetaOapg.properties.externalSkillId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["externalSkillName", "externalSkillLevel", "skillVendorName", "skillVendorId", "context", "effectiveMoment", "externalSkillId", "id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["externalSkillName"]) -> typing.Union[MetaOapg.properties.externalSkillName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["externalSkillLevel"]) -> typing.Union[MetaOapg.properties.externalSkillLevel, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["skillVendorName"]) -> typing.Union[MetaOapg.properties.skillVendorName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["skillVendorId"]) -> typing.Union[MetaOapg.properties.skillVendorId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union[MetaOapg.properties.context, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["effectiveMoment"]) -> typing.Union[MetaOapg.properties.effectiveMoment, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["externalSkillId"]) -> typing.Union[MetaOapg.properties.externalSkillId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["externalSkillName", "externalSkillLevel", "skillVendorName", "skillVendorId", "context", "effectiveMoment", "externalSkillId", "id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                externalSkillName: typing.Union[MetaOapg.properties.externalSkillName, str, schemas.Unset] = schemas.unset,
                externalSkillLevel: typing.Union[MetaOapg.properties.externalSkillLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                skillVendorName: typing.Union[MetaOapg.properties.skillVendorName, str, schemas.Unset] = schemas.unset,
                skillVendorId: typing.Union[MetaOapg.properties.skillVendorId, str, schemas.Unset] = schemas.unset,
                context: typing.Union[MetaOapg.properties.context, str, schemas.Unset] = schemas.unset,
                effectiveMoment: typing.Union[MetaOapg.properties.effectiveMoment, str, date, schemas.Unset] = schemas.unset,
                externalSkillId: typing.Union[MetaOapg.properties.externalSkillId, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    externalSkillName=externalSkillName,
                    externalSkillLevel=externalSkillLevel,
                    skillVendorName=skillVendorName,
                    skillVendorId=skillVendorId,
                    context=context,
                    effectiveMoment=effectiveMoment,
                    externalSkillId=externalSkillId,
                    id=id,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
