# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class JobDataForWorkerB8ac205877fd10000ea91719a02a00a2(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    businessTitle = schemas.StrSchema
                
                    @staticmethod
                    def supervisoryOrganization() -> typing.Type['SupervisoryOrganizationB8ac205877fd10000ea91743659800a7']:
                        return SupervisoryOrganizationB8ac205877fd10000ea91743659800a7
                
                    @staticmethod
                    def jobType() -> typing.Type['JobTypeB8ac205877fd10000ea91752f39c00ab']:
                        return JobTypeB8ac205877fd10000ea91752f39c00ab
                
                    @staticmethod
                    def jobProfile() -> typing.Type['JobProfileB8ac205877fd10000ea9174f73c500aa']:
                        return JobProfileB8ac205877fd10000ea9174f73c500aa
                
                    @staticmethod
                    def location() -> typing.Type['LocationB8ac205877fd10000ea91737c7da00a5']:
                        return LocationB8ac205877fd10000ea91737c7da00a5
                
                    @staticmethod
                    def workSpace() -> typing.Type['WorkSpace426ac445037110001b3eb91ddf6f0100']:
                        return WorkSpace426ac445037110001b3eb91ddf6f0100
                    id = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "businessTitle": businessTitle,
                        "supervisoryOrganization": supervisoryOrganization,
                        "jobType": jobType,
                        "jobProfile": jobProfile,
                        "location": location,
                        "workSpace": workSpace,
                        "id": id,
                        "descriptor": descriptor,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["businessTitle"]) -> MetaOapg.properties.businessTitle: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> 'SupervisoryOrganizationB8ac205877fd10000ea91743659800a7': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> 'JobTypeB8ac205877fd10000ea91752f39c00ab': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jobProfile"]) -> 'JobProfileB8ac205877fd10000ea9174f73c500aa': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'LocationB8ac205877fd10000ea91737c7da00a5': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workSpace"]) -> 'WorkSpace426ac445037110001b3eb91ddf6f0100': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["businessTitle", "supervisoryOrganization", "jobType", "jobProfile", "location", "workSpace", "id", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["businessTitle"]) -> typing.Union[MetaOapg.properties.businessTitle, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> typing.Union['SupervisoryOrganizationB8ac205877fd10000ea91743659800a7', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> typing.Union['JobTypeB8ac205877fd10000ea91752f39c00ab', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jobProfile"]) -> typing.Union['JobProfileB8ac205877fd10000ea9174f73c500aa', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['LocationB8ac205877fd10000ea91737c7da00a5', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workSpace"]) -> typing.Union['WorkSpace426ac445037110001b3eb91ddf6f0100', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["businessTitle", "supervisoryOrganization", "jobType", "jobProfile", "location", "workSpace", "id", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                businessTitle: typing.Union[MetaOapg.properties.businessTitle, str, schemas.Unset] = schemas.unset,
                supervisoryOrganization: typing.Union['SupervisoryOrganizationB8ac205877fd10000ea91743659800a7', schemas.Unset] = schemas.unset,
                jobType: typing.Union['JobTypeB8ac205877fd10000ea91752f39c00ab', schemas.Unset] = schemas.unset,
                jobProfile: typing.Union['JobProfileB8ac205877fd10000ea9174f73c500aa', schemas.Unset] = schemas.unset,
                location: typing.Union['LocationB8ac205877fd10000ea91737c7da00a5', schemas.Unset] = schemas.unset,
                workSpace: typing.Union['WorkSpace426ac445037110001b3eb91ddf6f0100', schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    businessTitle=businessTitle,
                    supervisoryOrganization=supervisoryOrganization,
                    jobType=jobType,
                    jobProfile=jobProfile,
                    location=location,
                    workSpace=workSpace,
                    id=id,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobDataForWorkerB8ac205877fd10000ea91719a02a00a2':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.job_profile_b8ac205877fd10000ea9174f73c500aa import JobProfileB8ac205877fd10000ea9174f73c500aa
from workday_staffing_python_sdk.model.job_type_b8ac205877fd10000ea91752f39c00ab import JobTypeB8ac205877fd10000ea91752f39c00ab
from workday_staffing_python_sdk.model.location_b8ac205877fd10000ea91737c7da00a5 import LocationB8ac205877fd10000ea91737c7da00a5
from workday_staffing_python_sdk.model.supervisory_organization_b8ac205877fd10000ea91743659800a7 import SupervisoryOrganizationB8ac205877fd10000ea91743659800a7
from workday_staffing_python_sdk.model.work_space426ac445037110001b3eb91ddf6f0100 import WorkSpace426ac445037110001b3eb91ddf6f0100
