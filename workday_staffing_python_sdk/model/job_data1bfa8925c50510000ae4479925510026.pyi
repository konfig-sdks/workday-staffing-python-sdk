# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class JobData1bfa8925c50510000ae4479925510026(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def location() -> typing.Type['Location6d3eb084b4c410002b617efb943f0059']:
                        return Location6d3eb084b4c410002b617efb943f0059
                    businessTitle = schemas.StrSchema
                
                    @staticmethod
                    def worker() -> typing.Type['WorkerFab4a151b24810000e66f769304c126b']:
                        return WorkerFab4a151b24810000e66f769304c126b
                
                    @staticmethod
                    def supervisoryOrganization() -> typing.Type['SupervisoryOrganizationFab4a151b24810000d13073c5d341257']:
                        return SupervisoryOrganizationFab4a151b24810000d13073c5d341257
                    nextPayPeriodStartDate = schemas.DateSchema
                
                    @staticmethod
                    def jobType() -> typing.Type['JobTypeB8ac205877fd100005c55b45c6400057']:
                        return JobTypeB8ac205877fd100005c55b45c6400057
                
                    @staticmethod
                    def jobProfile() -> typing.Type['JobProfile6fb921f8a11d10001d5268980bbb0097']:
                        return JobProfile6fb921f8a11d10001d5268980bbb0097
                    id = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "location": location,
                        "businessTitle": businessTitle,
                        "worker": worker,
                        "supervisoryOrganization": supervisoryOrganization,
                        "nextPayPeriodStartDate": nextPayPeriodStartDate,
                        "jobType": jobType,
                        "jobProfile": jobProfile,
                        "id": id,
                        "descriptor": descriptor,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location6d3eb084b4c410002b617efb943f0059': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["businessTitle"]) -> MetaOapg.properties.businessTitle: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["worker"]) -> 'WorkerFab4a151b24810000e66f769304c126b': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> 'SupervisoryOrganizationFab4a151b24810000d13073c5d341257': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["nextPayPeriodStartDate"]) -> MetaOapg.properties.nextPayPeriodStartDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> 'JobTypeB8ac205877fd100005c55b45c6400057': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jobProfile"]) -> 'JobProfile6fb921f8a11d10001d5268980bbb0097': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["location", "businessTitle", "worker", "supervisoryOrganization", "nextPayPeriodStartDate", "jobType", "jobProfile", "id", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location6d3eb084b4c410002b617efb943f0059', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["businessTitle"]) -> typing.Union[MetaOapg.properties.businessTitle, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["worker"]) -> typing.Union['WorkerFab4a151b24810000e66f769304c126b', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> typing.Union['SupervisoryOrganizationFab4a151b24810000d13073c5d341257', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["nextPayPeriodStartDate"]) -> typing.Union[MetaOapg.properties.nextPayPeriodStartDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> typing.Union['JobTypeB8ac205877fd100005c55b45c6400057', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jobProfile"]) -> typing.Union['JobProfile6fb921f8a11d10001d5268980bbb0097', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["location", "businessTitle", "worker", "supervisoryOrganization", "nextPayPeriodStartDate", "jobType", "jobProfile", "id", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                location: typing.Union['Location6d3eb084b4c410002b617efb943f0059', schemas.Unset] = schemas.unset,
                businessTitle: typing.Union[MetaOapg.properties.businessTitle, str, schemas.Unset] = schemas.unset,
                worker: typing.Union['WorkerFab4a151b24810000e66f769304c126b', schemas.Unset] = schemas.unset,
                supervisoryOrganization: typing.Union['SupervisoryOrganizationFab4a151b24810000d13073c5d341257', schemas.Unset] = schemas.unset,
                nextPayPeriodStartDate: typing.Union[MetaOapg.properties.nextPayPeriodStartDate, str, date, schemas.Unset] = schemas.unset,
                jobType: typing.Union['JobTypeB8ac205877fd100005c55b45c6400057', schemas.Unset] = schemas.unset,
                jobProfile: typing.Union['JobProfile6fb921f8a11d10001d5268980bbb0097', schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    location=location,
                    businessTitle=businessTitle,
                    worker=worker,
                    supervisoryOrganization=supervisoryOrganization,
                    nextPayPeriodStartDate=nextPayPeriodStartDate,
                    jobType=jobType,
                    jobProfile=jobProfile,
                    id=id,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobData1bfa8925c50510000ae4479925510026':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.job_profile6fb921f8a11d10001d5268980bbb0097 import JobProfile6fb921f8a11d10001d5268980bbb0097
from workday_staffing_python_sdk.model.job_type_b8ac205877fd100005c55b45c6400057 import JobTypeB8ac205877fd100005c55b45c6400057
from workday_staffing_python_sdk.model.location6d3eb084b4c410002b617efb943f0059 import Location6d3eb084b4c410002b617efb943f0059
from workday_staffing_python_sdk.model.supervisory_organization_fab4a151b24810000d13073c5d341257 import SupervisoryOrganizationFab4a151b24810000d13073c5d341257
from workday_staffing_python_sdk.model.worker_fab4a151b24810000e66f769304c126b import WorkerFab4a151b24810000e66f769304c126b
