# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "date",
                }
                
                class properties:
                
                    @staticmethod
                    def worker() -> typing.Type['Worker271bbd673582100010110b9f9a6d99e1']:
                        return Worker271bbd673582100010110b9f9a6d99e1
                    useNextPayPeriod = schemas.BoolSchema
                
                    @staticmethod
                    def template() -> typing.Type['Template2b1b95dfe4af100009f30dc769a31686']:
                        return Template2b1b95dfe4af100009f30dc769a31686
                
                    @staticmethod
                    def job() -> typing.Type['Job35b8f199c29410002508ffd7ad6101f3']:
                        return Job35b8f199c29410002508ffd7ad6101f3
                    date = schemas.DateSchema
                
                    @staticmethod
                    def location() -> typing.Type['Location6da81665c26510001fc6b1d42fae5f7b']:
                        return Location6da81665c26510001fc6b1d42fae5f7b
                
                    @staticmethod
                    def reason() -> typing.Type['Reason6da81665c26510001f34d0a154765e9b']:
                        return Reason6da81665c26510001f34d0a154765e9b
                
                    @staticmethod
                    def supervisoryOrganization() -> typing.Type['SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8']:
                        return SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8
                    id = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "worker": worker,
                        "useNextPayPeriod": useNextPayPeriod,
                        "template": template,
                        "job": job,
                        "date": date,
                        "location": location,
                        "reason": reason,
                        "supervisoryOrganization": supervisoryOrganization,
                        "id": id,
                        "descriptor": descriptor,
                    }
            
            date: MetaOapg.properties.date
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["worker"]) -> 'Worker271bbd673582100010110b9f9a6d99e1': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["useNextPayPeriod"]) -> MetaOapg.properties.useNextPayPeriod: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["template"]) -> 'Template2b1b95dfe4af100009f30dc769a31686': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Job35b8f199c29410002508ffd7ad6101f3': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location6da81665c26510001fc6b1d42fae5f7b': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["reason"]) -> 'Reason6da81665c26510001f34d0a154765e9b': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> 'SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["worker", "useNextPayPeriod", "template", "job", "date", "location", "reason", "supervisoryOrganization", "id", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["worker"]) -> typing.Union['Worker271bbd673582100010110b9f9a6d99e1', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["useNextPayPeriod"]) -> typing.Union[MetaOapg.properties.useNextPayPeriod, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> typing.Union['Template2b1b95dfe4af100009f30dc769a31686', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Job35b8f199c29410002508ffd7ad6101f3', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location6da81665c26510001fc6b1d42fae5f7b', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union['Reason6da81665c26510001f34d0a154765e9b', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> typing.Union['SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["worker", "useNextPayPeriod", "template", "job", "date", "location", "reason", "supervisoryOrganization", "id", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                date: typing.Union[MetaOapg.properties.date, str, date, ],
                worker: typing.Union['Worker271bbd673582100010110b9f9a6d99e1', schemas.Unset] = schemas.unset,
                useNextPayPeriod: typing.Union[MetaOapg.properties.useNextPayPeriod, bool, schemas.Unset] = schemas.unset,
                template: typing.Union['Template2b1b95dfe4af100009f30dc769a31686', schemas.Unset] = schemas.unset,
                job: typing.Union['Job35b8f199c29410002508ffd7ad6101f3', schemas.Unset] = schemas.unset,
                location: typing.Union['Location6da81665c26510001fc6b1d42fae5f7b', schemas.Unset] = schemas.unset,
                reason: typing.Union['Reason6da81665c26510001f34d0a154765e9b', schemas.Unset] = schemas.unset,
                supervisoryOrganization: typing.Union['SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8', schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    date=date,
                    worker=worker,
                    useNextPayPeriod=useNextPayPeriod,
                    template=template,
                    job=job,
                    location=location,
                    reason=reason,
                    supervisoryOrganization=supervisoryOrganization,
                    id=id,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.job35b8f199c29410002508ffd7ad6101f3 import Job35b8f199c29410002508ffd7ad6101f3
from workday_staffing_python_sdk.model.location6da81665c26510001fc6b1d42fae5f7b import Location6da81665c26510001fc6b1d42fae5f7b
from workday_staffing_python_sdk.model.reason6da81665c26510001f34d0a154765e9b import Reason6da81665c26510001f34d0a154765e9b
from workday_staffing_python_sdk.model.supervisory_organization_e3267ea37e6f100032c00c34a99e74d8 import SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8
from workday_staffing_python_sdk.model.template2b1b95dfe4af100009f30dc769a31686 import Template2b1b95dfe4af100009f30dc769a31686
from workday_staffing_python_sdk.model.worker271bbd673582100010110b9f9a6d99e1 import Worker271bbd673582100010110b9f9a6d99e1
