# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class ChangeJobLocation90151d6c4ff110001b4a46091678025c(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def location() -> typing.Type['Location90151d6c4ff110001bfa027116820278']:
                        return Location90151d6c4ff110001bfa027116820278
                    scheduledHours = schemas.IntSchema
                
                    @staticmethod
                    def workShift() -> typing.Type['WorkShift0ee7bb8b41db1000143d4e4822174f2e']:
                        return WorkShift0ee7bb8b41db1000143d4e4822174f2e
                
                    @staticmethod
                    def workSpace() -> typing.Type['WorkSpace0ee7bb8b41db10001e7db6a6c3e55663']:
                        return WorkSpace0ee7bb8b41db10001e7db6a6c3e55663
                    __annotations__ = {
                        "location": location,
                        "scheduledHours": scheduledHours,
                        "workShift": workShift,
                        "workSpace": workSpace,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location90151d6c4ff110001bfa027116820278': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["scheduledHours"]) -> MetaOapg.properties.scheduledHours: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workShift"]) -> 'WorkShift0ee7bb8b41db1000143d4e4822174f2e': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workSpace"]) -> 'WorkSpace0ee7bb8b41db10001e7db6a6c3e55663': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["location", "scheduledHours", "workShift", "workSpace", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location90151d6c4ff110001bfa027116820278', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["scheduledHours"]) -> typing.Union[MetaOapg.properties.scheduledHours, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workShift"]) -> typing.Union['WorkShift0ee7bb8b41db1000143d4e4822174f2e', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workSpace"]) -> typing.Union['WorkSpace0ee7bb8b41db10001e7db6a6c3e55663', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["location", "scheduledHours", "workShift", "workSpace", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                location: typing.Union['Location90151d6c4ff110001bfa027116820278', schemas.Unset] = schemas.unset,
                scheduledHours: typing.Union[MetaOapg.properties.scheduledHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                workShift: typing.Union['WorkShift0ee7bb8b41db1000143d4e4822174f2e', schemas.Unset] = schemas.unset,
                workSpace: typing.Union['WorkSpace0ee7bb8b41db10001e7db6a6c3e55663', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    location=location,
                    scheduledHours=scheduledHours,
                    workShift=workShift,
                    workSpace=workSpace,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChangeJobLocation90151d6c4ff110001b4a46091678025c':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.location90151d6c4ff110001bfa027116820278 import Location90151d6c4ff110001bfa027116820278
from workday_staffing_python_sdk.model.work_shift0ee7bb8b41db1000143d4e4822174f2e import WorkShift0ee7bb8b41db1000143d4e4822174f2e
from workday_staffing_python_sdk.model.work_space0ee7bb8b41db10001e7db6a6c3e55663 import WorkSpace0ee7bb8b41db10001e7db6a6c3e55663
