# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class JobFamilyView51ed1475e9e6100005d10fcedc5a000a(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    summary = schemas.StrSchema
                    inactive = schemas.BoolSchema
                
                    @staticmethod
                    def jobFamilyGroup() -> typing.Type['JobFamilyGroup51ed1475e9e6100006229cfe817b0014']:
                        return JobFamilyGroup51ed1475e9e6100006229cfe817b0014
                    
                    
                    class jobProfiles(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['JobProfileView51ed1475e9e6100006c698ef68480017']:
                                return JobProfileView51ed1475e9e6100006c698ef68480017
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['JobProfileView51ed1475e9e6100006c698ef68480017'], typing.List['JobProfileView51ed1475e9e6100006c698ef68480017']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'jobProfiles':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'JobProfileView51ed1475e9e6100006c698ef68480017':
                            return super().__getitem__(i)
                    id = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "summary": summary,
                        "inactive": inactive,
                        "jobFamilyGroup": jobFamilyGroup,
                        "jobProfiles": jobProfiles,
                        "id": id,
                        "descriptor": descriptor,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["inactive"]) -> MetaOapg.properties.inactive: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jobFamilyGroup"]) -> 'JobFamilyGroup51ed1475e9e6100006229cfe817b0014': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["jobProfiles"]) -> MetaOapg.properties.jobProfiles: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "inactive", "jobFamilyGroup", "jobProfiles", "id", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["inactive"]) -> typing.Union[MetaOapg.properties.inactive, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jobFamilyGroup"]) -> typing.Union['JobFamilyGroup51ed1475e9e6100006229cfe817b0014', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["jobProfiles"]) -> typing.Union[MetaOapg.properties.jobProfiles, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "inactive", "jobFamilyGroup", "jobProfiles", "id", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
                inactive: typing.Union[MetaOapg.properties.inactive, bool, schemas.Unset] = schemas.unset,
                jobFamilyGroup: typing.Union['JobFamilyGroup51ed1475e9e6100006229cfe817b0014', schemas.Unset] = schemas.unset,
                jobProfiles: typing.Union[MetaOapg.properties.jobProfiles, list, tuple, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    summary=summary,
                    inactive=inactive,
                    jobFamilyGroup=jobFamilyGroup,
                    jobProfiles=jobProfiles,
                    id=id,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobFamilyView51ed1475e9e6100005d10fcedc5a000a':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.job_family_group51ed1475e9e6100006229cfe817b0014 import JobFamilyGroup51ed1475e9e6100006229cfe817b0014
from workday_staffing_python_sdk.model.job_profile_view51ed1475e9e6100006c698ef68480017 import JobProfileView51ed1475e9e6100006c698ef68480017
