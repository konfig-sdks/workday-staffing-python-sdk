# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "date",
                }
                
                class properties:
                
                    @staticmethod
                    def supervisoryOrganization() -> typing.Type['SupervisoryOrganization75e528a78e9a10000ab75132a9df0116']:
                        return SupervisoryOrganization75e528a78e9a10000ab75132a9df0116
                
                    @staticmethod
                    def location() -> typing.Type['Location75e528a78e9a10000ab75125ebe50114']:
                        return Location75e528a78e9a10000ab75125ebe50114
                
                    @staticmethod
                    def template() -> typing.Type['Template2b1b95dfe4af100007f63081aec5158e']:
                        return Template2b1b95dfe4af100007f63081aec5158e
                
                    @staticmethod
                    def reason() -> typing.Type['Reason85deac43cd1a10000b96c80c118f171e']:
                        return Reason85deac43cd1a10000b96c80c118f171e
                    date = schemas.DateSchema
                
                    @staticmethod
                    def job() -> typing.Type['Job75e528a78e9a10000ab7512c5c550115']:
                        return Job75e528a78e9a10000ab7512c5c550115
                    id = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "supervisoryOrganization": supervisoryOrganization,
                        "location": location,
                        "template": template,
                        "reason": reason,
                        "date": date,
                        "job": job,
                        "id": id,
                        "descriptor": descriptor,
                    }
            
            date: MetaOapg.properties.date
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> 'SupervisoryOrganization75e528a78e9a10000ab75132a9df0116': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location75e528a78e9a10000ab75125ebe50114': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["template"]) -> 'Template2b1b95dfe4af100007f63081aec5158e': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["reason"]) -> 'Reason85deac43cd1a10000b96c80c118f171e': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["job"]) -> 'Job75e528a78e9a10000ab7512c5c550115': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["supervisoryOrganization", "location", "template", "reason", "date", "job", "id", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["supervisoryOrganization"]) -> typing.Union['SupervisoryOrganization75e528a78e9a10000ab75132a9df0116', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location75e528a78e9a10000ab75125ebe50114', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> typing.Union['Template2b1b95dfe4af100007f63081aec5158e', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union['Reason85deac43cd1a10000b96c80c118f171e', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union['Job75e528a78e9a10000ab7512c5c550115', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["supervisoryOrganization", "location", "template", "reason", "date", "job", "id", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                date: typing.Union[MetaOapg.properties.date, str, date, ],
                supervisoryOrganization: typing.Union['SupervisoryOrganization75e528a78e9a10000ab75132a9df0116', schemas.Unset] = schemas.unset,
                location: typing.Union['Location75e528a78e9a10000ab75125ebe50114', schemas.Unset] = schemas.unset,
                template: typing.Union['Template2b1b95dfe4af100007f63081aec5158e', schemas.Unset] = schemas.unset,
                reason: typing.Union['Reason85deac43cd1a10000b96c80c118f171e', schemas.Unset] = schemas.unset,
                job: typing.Union['Job75e528a78e9a10000ab7512c5c550115', schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    date=date,
                    supervisoryOrganization=supervisoryOrganization,
                    location=location,
                    template=template,
                    reason=reason,
                    job=job,
                    id=id,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.job75e528a78e9a10000ab7512c5c550115 import Job75e528a78e9a10000ab7512c5c550115
from workday_staffing_python_sdk.model.location75e528a78e9a10000ab75125ebe50114 import Location75e528a78e9a10000ab75125ebe50114
from workday_staffing_python_sdk.model.reason85deac43cd1a10000b96c80c118f171e import Reason85deac43cd1a10000b96c80c118f171e
from workday_staffing_python_sdk.model.supervisory_organization75e528a78e9a10000ab75132a9df0116 import SupervisoryOrganization75e528a78e9a10000ab75132a9df0116
from workday_staffing_python_sdk.model.template2b1b95dfe4af100007f63081aec5158e import Template2b1b95dfe4af100007f63081aec5158e
