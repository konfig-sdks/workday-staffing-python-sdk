# coding: utf-8

"""
    staffing

    The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.    Related Information: - Administrator Guide: Setup Considerations: Job Changes

    The version of the OpenAPI document: v6
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_staffing_python_sdk import schemas  # noqa: F401


class OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def grant() -> typing.Type['GrantA18edb56aca0100014a4a0bcf25c045e']:
                        return GrantA18edb56aca0100014a4a0bcf25c045e
                
                    @staticmethod
                    def program() -> typing.Type['ProgramA18edb56aca0100014a4a0b7ddf7045d']:
                        return ProgramA18edb56aca0100014a4a0b7ddf7045d
                
                    @staticmethod
                    def gift() -> typing.Type['GiftA18edb56aca0100014a4a0a9f876045b']:
                        return GiftA18edb56aca0100014a4a0a9f876045b
                
                    @staticmethod
                    def fund() -> typing.Type['FundA18edb56aca0100014a4a0b27352045c']:
                        return FundA18edb56aca0100014a4a0b27352045c
                    __annotations__ = {
                        "grant": grant,
                        "program": program,
                        "gift": gift,
                        "fund": fund,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["grant"]) -> 'GrantA18edb56aca0100014a4a0bcf25c045e': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["program"]) -> 'ProgramA18edb56aca0100014a4a0b7ddf7045d': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["gift"]) -> 'GiftA18edb56aca0100014a4a0a9f876045b': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["fund"]) -> 'FundA18edb56aca0100014a4a0b27352045c': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["grant", "program", "gift", "fund", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["grant"]) -> typing.Union['GrantA18edb56aca0100014a4a0bcf25c045e', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["program"]) -> typing.Union['ProgramA18edb56aca0100014a4a0b7ddf7045d', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["gift"]) -> typing.Union['GiftA18edb56aca0100014a4a0a9f876045b', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["fund"]) -> typing.Union['FundA18edb56aca0100014a4a0b27352045c', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grant", "program", "gift", "fund", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                grant: typing.Union['GrantA18edb56aca0100014a4a0bcf25c045e', schemas.Unset] = schemas.unset,
                program: typing.Union['ProgramA18edb56aca0100014a4a0b7ddf7045d', schemas.Unset] = schemas.unset,
                gift: typing.Union['GiftA18edb56aca0100014a4a0a9f876045b', schemas.Unset] = schemas.unset,
                fund: typing.Union['FundA18edb56aca0100014a4a0b27352045c', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    grant=grant,
                    program=program,
                    gift=gift,
                    fund=fund,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_staffing_python_sdk.model.fund_a18edb56aca0100014a4a0b27352045c import FundA18edb56aca0100014a4a0b27352045c
from workday_staffing_python_sdk.model.gift_a18edb56aca0100014a4a0a9f876045b import GiftA18edb56aca0100014a4a0a9f876045b
from workday_staffing_python_sdk.model.grant_a18edb56aca0100014a4a0bcf25c045e import GrantA18edb56aca0100014a4a0bcf25c045e
from workday_staffing_python_sdk.model.program_a18edb56aca0100014a4a0b7ddf7045d import ProgramA18edb56aca0100014a4a0b7ddf7045d
